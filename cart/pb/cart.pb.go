// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cart.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Cart struct {
	CartProducts         []*CartProduct `protobuf:"bytes,1,rep,name=cartProducts,proto3" json:"cartProducts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Cart) Reset()         { *m = Cart{} }
func (m *Cart) String() string { return proto.CompactTextString(m) }
func (*Cart) ProtoMessage()    {}
func (*Cart) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf731a5c8f9a516f, []int{0}
}
func (m *Cart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cart.Merge(m, src)
}
func (m *Cart) XXX_Size() int {
	return m.Size()
}
func (m *Cart) XXX_DiscardUnknown() {
	xxx_messageInfo_Cart.DiscardUnknown(m)
}

var xxx_messageInfo_Cart proto.InternalMessageInfo

func (m *Cart) GetCartProducts() []*CartProduct {
	if m != nil {
		return m.CartProducts
	}
	return nil
}

type CartProduct struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Thumbnail            string   `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	OptionId             int64    `protobuf:"varint,5,opt,name=optionId,proto3" json:"optionId,omitempty"`
	OptionName           string   `protobuf:"bytes,6,opt,name=optionName,proto3" json:"optionName,omitempty"`
	Count                int64    `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Price                int64    `protobuf:"varint,8,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CartProduct) Reset()         { *m = CartProduct{} }
func (m *CartProduct) String() string { return proto.CompactTextString(m) }
func (*CartProduct) ProtoMessage()    {}
func (*CartProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf731a5c8f9a516f, []int{1}
}
func (m *CartProduct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CartProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CartProduct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CartProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CartProduct.Merge(m, src)
}
func (m *CartProduct) XXX_Size() int {
	return m.Size()
}
func (m *CartProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_CartProduct.DiscardUnknown(m)
}

var xxx_messageInfo_CartProduct proto.InternalMessageInfo

func (m *CartProduct) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CartProduct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CartProduct) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CartProduct) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *CartProduct) GetOptionId() int64 {
	if m != nil {
		return m.OptionId
	}
	return 0
}

func (m *CartProduct) GetOptionName() string {
	if m != nil {
		return m.OptionName
	}
	return ""
}

func (m *CartProduct) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CartProduct) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func init() {
	proto.RegisterType((*Cart)(nil), "pb.Cart")
	proto.RegisterType((*CartProduct)(nil), "pb.CartProduct")
}

func init() { proto.RegisterFile("cart.proto", fileDescriptor_bf731a5c8f9a516f) }

var fileDescriptor_bf731a5c8f9a516f = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xeb, 0x24, 0xed, 0x9f, 0xde, 0xfc, 0x02, 0x74, 0xc5, 0x60, 0x55, 0xc8, 0x8a, 0x32,
	0x65, 0x0a, 0x52, 0x3b, 0xb2, 0xd1, 0x89, 0x05, 0x55, 0xe1, 0x09, 0x12, 0x3b, 0x12, 0x96, 0x68,
	0x6c, 0x39, 0x0e, 0xcf, 0xc2, 0x23, 0x31, 0xb2, 0xb2, 0xa1, 0xf0, 0x22, 0x28, 0x37, 0xa2, 0x0d,
	0xdb, 0x39, 0xdf, 0xb9, 0x57, 0xd7, 0x3e, 0x00, 0xb2, 0x72, 0xbe, 0xb0, 0xce, 0x78, 0x83, 0x81,
	0xad, 0xb3, 0x3b, 0x88, 0xf6, 0x95, 0xf3, 0xb8, 0x83, 0xff, 0x63, 0x72, 0x70, 0x46, 0xf5, 0xd2,
	0x77, 0x9c, 0xa5, 0x61, 0x9e, 0x6c, 0x2f, 0x0b, 0x5b, 0x17, 0xfb, 0x33, 0x2f, 0xff, 0x0c, 0x65,
	0x9f, 0x0c, 0x92, 0x59, 0x8a, 0x17, 0x10, 0x68, 0xc5, 0x59, 0xca, 0xf2, 0xb0, 0x0c, 0xb4, 0x42,
	0x84, 0xa8, 0xad, 0x8e, 0x0d, 0x0f, 0x52, 0x96, 0xaf, 0x4b, 0xd2, 0x98, 0x42, 0xa2, 0x9a, 0x4e,
	0x3a, 0x6d, 0xbd, 0x36, 0x2d, 0x0f, 0x29, 0x9a, 0x23, 0xbc, 0x81, 0xb5, 0x7f, 0xee, 0x8f, 0x75,
	0x5b, 0xe9, 0x17, 0x1e, 0x51, 0x7e, 0x06, 0xb8, 0x81, 0xd8, 0xd0, 0xdc, 0x83, 0xe2, 0x4b, 0xba,
	0x74, 0xf2, 0x28, 0x00, 0x26, 0xfd, 0x38, 0x5e, 0x5d, 0xd1, 0xea, 0x8c, 0xe0, 0x35, 0x2c, 0xa5,
	0xe9, 0x5b, 0xcf, 0xff, 0xd1, 0xe2, 0x64, 0x46, 0x6a, 0x9d, 0x96, 0x0d, 0x8f, 0x27, 0x4a, 0x66,
	0x7b, 0x3b, 0x7d, 0xed, 0xa9, 0x71, 0xaf, 0x5a, 0x8e, 0xcf, 0x8e, 0x0f, 0xa6, 0xf3, 0xd4, 0x55,
	0xfc, 0xdb, 0xca, 0xe6, 0xa4, 0xb2, 0xc5, 0xfd, 0xd5, 0xfb, 0x20, 0xd8, 0xc7, 0x20, 0xd8, 0xd7,
	0x20, 0xd8, 0xdb, 0xb7, 0x58, 0xd4, 0x2b, 0xaa, 0x79, 0xf7, 0x13, 0x00, 0x00, 0xff, 0xff, 0x10,
	0x6a, 0xa7, 0x88, 0x74, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CartServiceClient interface {
	PostCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Cart, error)
}

type cartServiceClient struct {
	cc *grpc.ClientConn
}

func NewCartServiceClient(cc *grpc.ClientConn) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) PostCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := c.cc.Invoke(ctx, "/pb.CartService/PostCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
type CartServiceServer interface {
	PostCart(context.Context, *Cart) (*Cart, error)
}

// UnimplementedCartServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCartServiceServer struct {
}

func (*UnimplementedCartServiceServer) PostCart(ctx context.Context, req *Cart) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCart not implemented")
}

func RegisterCartServiceServer(s *grpc.Server, srv CartServiceServer) {
	s.RegisterService(&_CartService_serviceDesc, srv)
}

func _CartService_PostCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).PostCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CartService/PostCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).PostCart(ctx, req.(*Cart))
	}
	return interceptor(ctx, in, info, handler)
}

var _CartService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostCart",
			Handler:    _CartService_PostCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}

func (m *Cart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CartProducts) > 0 {
		for iNdEx := len(m.CartProducts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CartProducts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCart(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CartProduct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CartProduct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CartProduct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Price != 0 {
		i = encodeVarintCart(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x40
	}
	if m.Count != 0 {
		i = encodeVarintCart(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OptionName) > 0 {
		i -= len(m.OptionName)
		copy(dAtA[i:], m.OptionName)
		i = encodeVarintCart(dAtA, i, uint64(len(m.OptionName)))
		i--
		dAtA[i] = 0x32
	}
	if m.OptionId != 0 {
		i = encodeVarintCart(dAtA, i, uint64(m.OptionId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Thumbnail) > 0 {
		i -= len(m.Thumbnail)
		copy(dAtA[i:], m.Thumbnail)
		i = encodeVarintCart(dAtA, i, uint64(len(m.Thumbnail)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCart(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCart(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCart(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCart(dAtA []byte, offset int, v uint64) int {
	offset -= sovCart(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Cart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CartProducts) > 0 {
		for _, e := range m.CartProducts {
			l = e.Size()
			n += 1 + l + sovCart(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CartProduct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCart(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCart(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCart(uint64(l))
	}
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovCart(uint64(l))
	}
	if m.OptionId != 0 {
		n += 1 + sovCart(uint64(m.OptionId))
	}
	l = len(m.OptionName)
	if l > 0 {
		n += 1 + l + sovCart(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovCart(uint64(m.Count))
	}
	if m.Price != 0 {
		n += 1 + sovCart(uint64(m.Price))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCart(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCart(x uint64) (n int) {
	return sovCart(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Cart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CartProducts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCart
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCart
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CartProducts = append(m.CartProducts, &CartProduct{})
			if err := m.CartProducts[len(m.CartProducts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCart
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CartProduct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CartProduct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CartProduct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCart
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCart
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCart
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCart
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCart
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCart
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionId", wireType)
			}
			m.OptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCart
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCart
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCart
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCart(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCart
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCart
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCart
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCart
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCart
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCart
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCart        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCart          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCart = fmt.Errorf("proto: unexpected end of group")
)
